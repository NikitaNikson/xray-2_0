#include "common.h"
#include "sload.h"

uniform sampler2D s_tile1;
uniform sampler2D s_tile2;

// calculate origin of texture in 4x4 atlas
float2 origin(float id)
{
	int iid = id * 256;

	float x = (iid % 4) * 0.25;
	float y = (iid / 4) * 0.25;

	return float2(x, y);
}

struct o_terrain
{
	float4 hpos 	: POSITION;

	half4 c1 	: COLOR0;
	half4 c2 	: COLOR1;
	
	float2 tc1 	: TEXCOORD0;
	float4 tex	: TEXCOORD1;
	float4 position : TEXCOORD2;
	half3  N 	: TEXCOORD3;
	float  Z    : TEXCOORD4;
};

f_deffer main(o_terrain i)
{
	f_deffer o;

	half 	ms	= xmaterial;

	float4 color1, color2;

	float2 tc = frac(i.tc1) * 0.25;
	color1  = tex2D(s_tile1, tc + origin(i.tex.r)) * i.c1.r;
	color1 += tex2D(s_tile1, tc + origin(i.tex.g)) * i.c1.g;
	color1 += tex2D(s_tile1, tc + origin(i.tex.b)) * i.c1.b;

	tc = frac(i.tc1 + 0.5) * 0.25;
	color2  = tex2D(s_tile2, tc + origin(i.tex.r)) * i.c1.r;
	color2 += tex2D(s_tile2, tc + origin(i.tex.g)) * i.c1.g;
	color2 += tex2D(s_tile2, tc + origin(i.tex.b)) * i.c1.b;

//	color1 = float4(1,0,0,1);
//	color2 = float4(0,1,0,1);

// copy paste https://0fps.net/2013/07/09/texture-atlases-wrapping-and-mip-mapping/
	float2 frac0 = frac(i.tc1);
	float2 frac1 = frac(i.tc1+0.5);
	float w0 = pow(0.5 - max(abs(frac0.x - 0.5), abs(frac0.y - 0.5)), 8.0);
	float w1 = pow(0.5 - max(abs(frac1.x - 0.5), abs(frac1.y - 0.5)), 8.0);

	float4 final = (w0 * color1 + w1 * color2 ) / (w0+w1);
// \copy paste

//	tc = frac(i.tc1);
//	float weight = clamp( pow(abs(tc.x-0.5)*2, 8) + pow(abs(tc.y-0.5)*2, 8), 0, 1 );
//	float4 final = lerp(color1, color2, weight);

	final *= i.c2;

	o.Ne        = half4(normalize((half3)i.N.xyz),i.position.w);
	o.position  = half4(i.position.xyz + o.Ne.xyz * def_virtualh/2.h, ms);
	o.C 		= half4(final.rgb,0);

	return o;
}